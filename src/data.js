export const data = [
    {
        term: 'Фреймворк',
        defenition: 'Фреймворк — это программная платформа, которая упрощает разработку программного продукта, определяет структуру проекта и помогает удобно объединять в нём разные компоненты.',
        sourceUrl: 'https://skillbox.ru/media/code/chto-takoe-freymvork-i-kak-vybrat-freymvork-dlya-frontenda-sovety-byvalykh/',
    },
    {
        term: 'React',
        defenition: 'React — это библиотека JavaScript с открытым кодом для создания внешних пользовательских интерфейсов. В отличие от других библиотек JavaScript, предоставляющих полноценную платформу приложений, React ориентируется исключительно на создание представлений приложений через инкапсулированные единицы (называются компонентами), которые сохраняют состояние и генерируют элементы пользовательского интерфейса.',
        sourceUrl: 'https://learn.microsoft.com/ru-ru/windows/dev-environment/javascript/react-overview',
    },
    {
        term: 'Angular',
        defenition: 'Angular - это набор инструментов для создания фреймворка, наиболее подходящего для разработки вашего приложения. Он полностью расширяем и хорошо работает с другими библиотеками. Каждая функция может быть изменена или заменена в соответствии с вашим уникальным рабочим процессом разработки и потребностями в функциях.',
        sourceUrl: 'https://angularjs.org/',
    },
    {
        term: 'Vue',
        defenition: 'Vue - это прогрессивный фреймворк для создания пользовательских интерфейсов. Он разработан с нуля и легко может стать библиотекой и фреймворком в зависимости от ваших целей. Он состоит из основной библиотеки, которая фокусируется на уровне представления, и экосистемы вспомогательных библиотек. ',
        sourceUrl: 'https://medium.com/js-dojo/vue-ecosystem-979773a9bf54',
    },
    {
        term: 'HTML',
        defenition: 'HTML расшифровывается как язык разметки гипертекста. Это стандартный язык разметки для создания веб-страниц. Он позволяет создавать и структурировать разделы, абзацы и ссылки с использованием HTML-элементов (строительных блоков веб-страницы), таких как теги и атрибуты.',
        sourceUrl: 'https://www.hostinger.com/tutorials/what-is-html',
    },
    {
        term: 'JavaScript',
        defenition: 'JavaScript - это облегченный язык программирования, обычно используемый веб-разработчиками для добавления динамических взаимодействий к веб-страницам, приложениям, серверам и даже играм. Он легко работает бок о бок с HTML и CSS, дополняя CSS при форматировании HTML-элементов и обеспечивая взаимодействие с пользователем - возможность, которой не хватает только CSS.',
        sourceUrl: 'https://www.hostinger.com/tutorials/what-is-javascript',
    },
    {
        term: 'Двусторонняя привязка',
        defenition: 'Двусторонняя привязка - это способ предоставления возможности компонентам вашего приложения  обмениваться данными. Двусторонняя привязку используется для прослушивания событий и обновления значений одновременно между родительским и дочерним компонентами.',
        sourceUrl: 'https://angular.io/guide/two-way-binding',
    },
    {
        term: 'Компонент',
        defenition: 'Компонент – это самодостаточная единица программного кода, которая объединяет в себе данные и логику и предоставляет средства для взаимодействия с пользователем. Компонент может быть как простым, так и сложным – например, кнопка, текстовое поле, таблица или целый интерфейс пользователя.',
        sourceUrl: 'https://studfile.net/preview/9497985/page:12/',
    },
    {
        term: 'Маршрутизация',
        defenition: 'Маршрутизация — процесс определения оптимального маршрута данных в сетях связи. Маршруты могут задаваться административно (статические маршруты), либо вычисляться с помощью алгоритмов маршрутизации, базируясь на информации о топологии и состоянии сети, полученной с помощью протоколов маршрутизации (динамические маршруты).',
        sourceUrl: 'https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%80%D1%88%D1%80%D1%83%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F',
    },
    {
        term: 'DOM',
        defenition: 'DOM (Document Object Model) — это специальная древовидная структура, которая позволяет управлять HTML-разметкой из JavaScript-кода. Управление обычно состоит из добавления и удаления элементов, изменения их стилей и содержимого. Браузер создаёт DOM при загрузке страницы, складывает его в переменную document и сообщает, что DOM создан, с помощью события DOMContentLoaded. С переменной document начинается любая работа с HTML-разметкой в JavaScript.',
        sourceUrl: 'https://doka.guide/js/dom/?ysclid=lnupatk82f577773261',
        addition: 'Document Object Model',
    },
    {
        term: 'SPA',
        defenition: 'SPA (одностраничные приложения) — это веб-приложения, которые загружают одну HTML-страницу и динамически обновляют ее при взаимодействии с пользователем.',
        sourceUrl: 'https://learn.microsoft.com/ru-ru/archive/msdn-magazine/2013/november/asp-net-single-page-applications-build-modern-responsive-web-apps-with-asp-net',
        addition: 'Single Page Application',
    },
    {
        term: 'Кроссбраузерность',
        defenition: 'Кроссбраузерность – это способность веб-ресурса отображаться одинаково хорошо во всех популярных браузерах без перебоев в функционировании и ошибок в верстке, с одинаково корректной читабельностью контента. Это очень важный показатель как для поисковых систем, так и пользовательской аудитории.',
        sourceUrl: 'https://timeweb.com/ru/community/articles/chto-takoe-krossbrauzernost',
    },
    {
        term: 'JSON',
        defenition: 'JSON — это популярный формат текстовых данных, который используется для обмена данными в современных веб- и мобильных приложениях. Кроме того, JSON используется для хранения неструктурированных данных в файлах журналов или базах данных NoSQL, таких как Microsoft Azure Cosmos DB. Многие веб-службы REST возвращают результаты в формате текста JSON или принимают данные в формате JSON.',
        sourceUrl: 'https://learn.microsoft.com/ru-ru/sql/relational-databases/json/json-data-sql-server?view=sql-server-ver15',
    },
    {
        term: 'AJAX',
        defenition: 'AJAX — метод отправки или запроса данных с последующим обновлением интерфейса по этим данным, без необходимости перезагрузки страницы. За счет этого уменьшается время отклика и веб-страница становится более интерактивной.',
        sourceUrl: 'https://goit.global/javascript/ru/v1/module-12/fetch.html',
    },
    {
        term: 'TypeScript',
        defenition: 'TypeScript — это расширенная версия языка JavaScript, изначально созданная в Microsoft для разработки крупных приложений. TypeScript помогает избавиться от типичных проблем JavaScript: ошибок типов в рантайме и неконтролируемо разрастающегося кода, сигнатуры функций которого находятся в лучшем случае в памяти разработчика, а в худшем и вовсе утрачены.',
        sourceUrl: 'https://academy.yandex.ru/journal/tipiziruy-eto',
    },
    {
        term: 'MVVM',
        defenition: 'MVVM — это паттерн разработки, позволяющий разделить приложение на три функциональные части: Model — основная логика программы (работа с данными, вычисления, запросы и так далее); View — вид или представление (пользовательский интерфейс); ViewModel — модель представления, которая служит прослойкой между View и Model. Такое разделение позволяет ускорить разработку и поддерживаемость программы — можно менять один компонент, не затрагивая код другого.',
        sourceUrl: 'https://skillbox.ru/media/code/mvvm_proektirovanie_prilozheniy_dlya_windows/',
        addition: 'Model-View-ViewModel',
    },
    {
        term: 'PWA',
        defenition: 'Прогрессивные веб-приложения (PWA) — это приложения, которые создаются с помощью веб-технологий и которые можно устанавливать и запускать на всех устройствах из одной базы кода. PWA предоставляют пользователям встроенные возможности на поддерживающих устройствах. Они адаптируются к возможностям, поддерживаемым каждым устройством, а также могут работать в веб-браузерах, таких как веб-сайты.',
        sourceUrl: 'https://learn.microsoft.com/ru-ru/microsoft-edge/progressive-web-apps-chromium/',
        addition: 'Progressive Web Applications',
    },
    {
        term: 'TBT',
        defenition: 'TBT — это общее время, в течение которого страница не может отвечать на пользовательский ввод, такой как щелчки мыши, касания экрана или нажатия на клавиатуру. Сумма рассчитывается путем сложения блокирующей части всех длительных задач в промежутке между первой отрисовкой контента (FCP) и временем до интерактивности (TTI). Длительной задачей считается любая задача, которая выполняется более 50 мс. Время свыше 50 мс считается блокирующей частью.',
        sourceUrl: 'https://developer.chrome.com/ru/docs/lighthouse/performance/lighthouse-total-blocking-time/#:~:text=TBT%20%E2%80%94%20%D1%8D%D1%82%D0%BE%20%D0%BE%D0%B1%D1%89%D0%B5%D0%B5%20%D0%B2%D1%80%D0%B5%D0%BC%D1%8F%2C,%D0%B8%20%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B5%D0%BC%20%D0%B4%D0%BE%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20(TTI)',
        addition: 'общее время блокировки',
    },
    {
        term: 'TTI',
        defenition: 'Время до интерактивности (англ. Time to Interactive, TTI) - это нестандартизированная метрика веб-производительности, которая определяется как момент времени, когда завершилась последняя долгая задача, после которой следовало 5 секунд бездействия сети и основного потока.',
        sourceUrl: 'https://developer.mozilla.org/ru/docs/Glossary/Time_to_interactive',
        addition: 'время до интерактивности',
    },
    {
        term: 'FCP',
        defenition: 'FCP (Первая отрисовка контента) — одна из метрик, отслеживаемых в разделе Performance (Производительность) отчета Lighthouse. FCP измеряет, сколько времени требуется браузеру для отрисовки первой части контента DOM после перехода пользователя на страницу. ',
        sourceUrl: 'https://developer.chrome.com/ru/docs/lighthouse/performance/first-contentful-paint/#:~:text=FCP%20(%D0%9F%D0%B5%D1%80%D0%B2%D0%B0%D1%8F%20%D0%BE%D1%82%D1%80%D0%B8%D1%81%D0%BE%D0%B2%D0%BA%D0%B0%20%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%BD%D1%82%D0%B0)%20%E2%80%94,%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D0%B0%D1%81%D0%BF%D0%B5%D0%BA%D1%82%20%D1%81%D0%BA%D0%BE%D1%80%D0%BE%D1%81%D1%82%D0%B8%20%D0%B7%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B8%20%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D1%8B',
        addition: 'время первой отрисовки содержимого на экране',
    },
    {
        term: 'TTFB',
        defenition: 'TTFB — это метрика, измеряющая время между запросом ресурса и моментом начала поступления первого байта ответа. TTFB — это сумма следующих фаз запроса: время перенаправления, время запуска сервисного работника (если применимо), DNS-поиск, соединение и согласование TLS, запрос, вплоть до момента поступления первого байта ответа. Уменьшение задержки во время установки соединения и на серверной стороне будет способствовать снижению TTFB.',
        sourceUrl: 'https://web.dev/articles/ttfb?hl=ru#what_is_ttfb',
        addition: 'время до первого байта',
    },
    {
        term: 'SSR',
        defenition: 'Рендеринг на стороне сервера (SSR) — это популярная методика рендеринга одностраничного клиентского приложения (SPA) на сервере и последующей отправки на клиент полностью отрисованной страницы. Это позволяет использовать динамические компоненты в качестве статической разметки HTML. Такой подход может быть полезным для поисковой оптимизации (SEO), когда при индексации код JavaScript не обрабатывается надлежащим образом. Это также может быть полезно в ситуациях, когда загрузка большого блока JavaScript затруднена из-за медленной скорости сети.',
        sourceUrl: 'https://www.digitalocean.com/community/tutorials/react-server-side-rendering-ru',
        addition: 'Рендеринг на стороне сервера',
    },
    {
        term: 'CSR',
        defenition: 'Рендеринг на стороне клиента (CSR) - это концепция веб-разработки, которая представляет собой способность веб-сайта отображать контент на стороне клиента, в браузере пользователя, а не на сервере. Такой подход обеспечивает динамичный и интерактивный пользовательский опыт, поскольку контент может загружаться и изменяться без необходимости полной перезагрузки страницы.',
        sourceUrl: 'https://www.sanity.io/glossary/client-side-rendering',
        addition: 'Клиентский рендеринг',
    },
    {
        term: 'PRPL',
        defenition: 'PRPL — это паттерн для структурирования и улучшения производительности web-приложений (SPA и PWA). PRPL описывает четыре этапа жизненного цикла приложения от этапа доставки кода в браузер до его отрисовки: Push — при первом открытии приложения, самые необходимые ресурсы доставляются как можно быстрее с помощью server push или preload; Render — затем отрисовывается экран приложения с использованием минимального количества необходимых ему ресурсов; Pre-cache — после того как приложение было отрисовано, оно может подгрузить ресурсы тех страниц приложения, которые с большой вероятностью будут открыты пользователем; Lazy-load — при работе с приложением его куски доставляются в браузер по мере необходимости, это обычно реализуется с помощью code splitting и динамических импортов.',
        sourceUrl: 'https://defront.ru/posts/2020/10-october/24-prpl-pattern/?ysclid=lnuqph46l1544052291',
        addition: 'Push, Render, Pre-cache, Lazy-load',
    },
    {
        term: 'Отрисовка компонента',
        defenition: 'Отрисовка компонента – это процесс превращения данных и логики компонента в графическое представление, которое будет отображаться на экране. Язык программирования и фреймворк, с которыми вы работаете, определяют специфические инструменты и методы для отрисовки компонентов.',
        sourceUrl: 'https://qaa-engineer.ru/otrisovka-komponenta/',
    },
    {
        term: 'Браузер',
        defenition: 'Браузер — это программа для просмотра веб-страниц. Она преобразует получаемый из сети код в понятные для человеческого восприятия элементы и позволяет управлять ими. Название происходит от английского слова browse — просматривать.',
        sourceUrl: 'https://skillbox.ru/media/marketing/chto-takoe-brauzer-kakie-byvayut-brauzery-i-chto-oni-umeyut/?ysclid=lnuqubpr0509759547',
    },
    {
        term: 'ES6',
        defenition: 'ES6 — это стандарт, на котором основан JavaScript, является фундаментальной версией стандарта ECMAScript.',
        sourceUrl: 'https://frontend-stuff.com/blog/es6/',
        addition: 'ECMAScript',
    },
    {
        term: 'XHTML',
        defenition: 'XHTML (EXtensible HyperText Markup Language, расширяемый язык разметки гипертекста) - язык разметки веб-страниц, по возможностям сопоставимый с HTML, но с более строгим синтаксисом. В XHTML сохранены все особенности HTML, однако привнесены более строгие правила создания страниц, что позволяет делать сайты независимыми от устройства отображения и браузера. Это значит, что сайт будет корректно отображаться во всех современных браузерах и платформах вроде компьютеров, смартфонов, КПК, и др.',
        sourceUrl: 'https://ru.w3docs.com/uchebnik-html/xhtml.html#:~:text=XHTML%20(EXtensible%20HyperText%20Markup%20Language%2C,%D0%BE%D1%82%20%D1%83%D1%81%D1%82%D1%80%D0%BE%D0%B9%D1%81%D1%82%D0%B2%D0%B0%20%D0%BE%D1%82%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B8%20%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D0%B0',
    },
    {
        term: 'XML',
        defenition: 'Расширяемый язык разметки (XML) – это язык разметки, который предоставляет правила для определения любых данных. В отличие от других языков программирования, XML не может выполнять вычислительные операции сам по себе. Вместо этого для управления структурированными данными можно использовать любой язык программирования или программное обеспечение.',
        sourceUrl: 'https://aws.amazon.com/ru/what-is/xml/#:~:text=%D0%A0%D0%B0%D1%81%D1%88%D0%B8%D1%80%D1%8F%D0%B5%D0%BC%D1%8B%D0%B9%20%D1%8F%D0%B7%D1%8B%D0%BA%20%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8%20(XML)%20%E2%80%93,%D1%8F%D0%B7%D1%8B%D0%BA%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%20%D0%B8%D0%BB%D0%B8%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B5%20%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5',
    },
    {
        term: 'REST API',
        defenition: 'REST (Representational State Transfer) API — это архитектурный стиль для разработки веб-сервисов, основанный на стандартных HTTP-методах и ресурсоориентированном подходе. Формат данных в REST API может быть разнообразным, включая JSON, XML и другие. REST API широко применяется в веб-приложениях и мобильных приложениях для обеспечения межсистемного взаимодействия и интеграции с различными сервисами и платформами.',
        sourceUrl: 'https://1cloud.ru/blog/intoduction_in_api_and_restapi#:~:text=REST%20(Representational%20State%20Transfer)%20API,%D1%81%20%D1%80%D0%B0%D0%B7%D0%BB%D0%B8%D1%87%D0%BD%D1%8B%D0%BC%D0%B8%20%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D0%B0%D0%BC%D0%B8%20%D0%B8%20%D0%BF%D0%BB%D0%B0%D1%82%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D0%BC%D0%B8',
    },
    {
        term: 'VDOM',
        defenition: 'Виртуальный DOM (VDOM) — это концепция программирования, в которой идеальное или «виртуальное» представление пользовательского интерфейса хранится в памяти и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM. Поскольку «виртуальный DOM» — это скорее паттерн, чем конкретная технология, этим термином иногда обозначают разные понятия. В мире React «виртуальный DOM» обычно ассоциируется с React-элементами , поскольку они являются объектами, представляющими пользовательский интерфейс.',
        sourceUrl: 'https://ru.legacy.reactjs.org/docs/faq-internals.html',
    },
]